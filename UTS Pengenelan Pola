{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled18.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOEpBhaC9i6OnOeUeZmxnA8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/reza7angkasa/design-and-algorithm-analysis/blob/main/UTS%20Pengenelan%20Pola\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 117,
      "metadata": {
        "id": "Cbj6Cal9GzOR"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import f1_score\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_excel('/content/Adaro Energy Tbk - Ardean Reza Dataset.xlsx')\n",
        "len(dataset)\n",
        "dataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "nr3-12qCLJs_",
        "outputId": "65963be3-676d-47e1-c86a-371e1a1d8259"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     x(n - 5)  x(n - 4)  x(n - 3)  x(n - 2)  x(n - 1)  x(n)  x(n + 1)\n",
              "0         725       690       645       745       775   850       965\n",
              "1         690       645       745       775       850   965       990\n",
              "2         645       745       775       850       965   990       925\n",
              "3         745       775       850       965       990   925       990\n",
              "4         775       850       965       990       925   990      1020\n",
              "..        ...       ...       ...       ...       ...   ...       ...\n",
              "477      3040      3240      3120      3080      2980  3000      3000\n",
              "478      3240      3120      3080      2980      3000  3000      2710\n",
              "479      3120      3080      2980      3000      3000  2710      2820\n",
              "480      3080      2980      3000      3000      2710  2820      2740\n",
              "481      2980      3000      3000      2710      2820  2740         0\n",
              "\n",
              "[482 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-900dd607-2bd4-4711-acb4-ea18041d1cce\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x(n - 5)</th>\n",
              "      <th>x(n - 4)</th>\n",
              "      <th>x(n - 3)</th>\n",
              "      <th>x(n - 2)</th>\n",
              "      <th>x(n - 1)</th>\n",
              "      <th>x(n)</th>\n",
              "      <th>x(n + 1)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>725</td>\n",
              "      <td>690</td>\n",
              "      <td>645</td>\n",
              "      <td>745</td>\n",
              "      <td>775</td>\n",
              "      <td>850</td>\n",
              "      <td>965</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>690</td>\n",
              "      <td>645</td>\n",
              "      <td>745</td>\n",
              "      <td>775</td>\n",
              "      <td>850</td>\n",
              "      <td>965</td>\n",
              "      <td>990</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>645</td>\n",
              "      <td>745</td>\n",
              "      <td>775</td>\n",
              "      <td>850</td>\n",
              "      <td>965</td>\n",
              "      <td>990</td>\n",
              "      <td>925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>745</td>\n",
              "      <td>775</td>\n",
              "      <td>850</td>\n",
              "      <td>965</td>\n",
              "      <td>990</td>\n",
              "      <td>925</td>\n",
              "      <td>990</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>775</td>\n",
              "      <td>850</td>\n",
              "      <td>965</td>\n",
              "      <td>990</td>\n",
              "      <td>925</td>\n",
              "      <td>990</td>\n",
              "      <td>1020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>477</th>\n",
              "      <td>3040</td>\n",
              "      <td>3240</td>\n",
              "      <td>3120</td>\n",
              "      <td>3080</td>\n",
              "      <td>2980</td>\n",
              "      <td>3000</td>\n",
              "      <td>3000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>478</th>\n",
              "      <td>3240</td>\n",
              "      <td>3120</td>\n",
              "      <td>3080</td>\n",
              "      <td>2980</td>\n",
              "      <td>3000</td>\n",
              "      <td>3000</td>\n",
              "      <td>2710</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>479</th>\n",
              "      <td>3120</td>\n",
              "      <td>3080</td>\n",
              "      <td>2980</td>\n",
              "      <td>3000</td>\n",
              "      <td>3000</td>\n",
              "      <td>2710</td>\n",
              "      <td>2820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>480</th>\n",
              "      <td>3080</td>\n",
              "      <td>2980</td>\n",
              "      <td>3000</td>\n",
              "      <td>3000</td>\n",
              "      <td>2710</td>\n",
              "      <td>2820</td>\n",
              "      <td>2740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>481</th>\n",
              "      <td>2980</td>\n",
              "      <td>3000</td>\n",
              "      <td>3000</td>\n",
              "      <td>2710</td>\n",
              "      <td>2820</td>\n",
              "      <td>2740</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>482 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-900dd607-2bd4-4711-acb4-ea18041d1cce')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-900dd607-2bd4-4711-acb4-ea18041d1cce button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-900dd607-2bd4-4711-acb4-ea18041d1cce');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MHA1xfbfMzXs",
        "outputId": "72210f54-43be-423d-fc0d-99d3003e5dd6"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(482, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = dataset.iloc[:,0:6]\n",
        "Y = dataset.iloc[:,6]\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=1, test_size=0.2)"
      ],
      "metadata": {
        "id": "aoM3SXMqNBaN"
      },
      "execution_count": 120,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(X_train))\n",
        "print(len(Y_train))\n",
        "print(len(X_test))\n",
        "print(len(Y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N6Jx8T6lOfIR",
        "outputId": "64c7badb-aa1a-4c1f-964b-25a9f0db5901"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "385\n",
            "385\n",
            "97\n",
            "97\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sc_X = StandardScaler()\n",
        "X_train = sc_X.fit_transform(X_train)\n",
        "X_test = sc_X.transform(X_test)"
      ],
      "metadata": {
        "id": "L4BM1VWZPdVM"
      },
      "execution_count": 122,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = KNeighborsRegressor(n_neighbors=5, p=2, metric='euclidean')"
      ],
      "metadata": {
        "id": "C7gsrZ23QNpl"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_train, Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kFw8eGqcQdGp",
        "outputId": "090b9679-2670-4719-d0d3-5fd7c259b68c"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsRegressor(metric='euclidean')"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred=model.predict(X_test)\n",
        "Y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m5NIGBVxXeh3",
        "outputId": "757f7db0-261c-41de-c81a-5299adc39a21"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 996., 1186., 1414., 1171., 1123., 1451., 1196., 1149., 1211.,\n",
              "       2484., 1673.,  919., 1079., 1031., 1522., 1355., 1335., 2334.,\n",
              "       1231., 1192., 1289., 1216., 1251., 2254., 1128., 1236., 2166.,\n",
              "       1150., 1239., 1212., 1312., 2282.,  952., 1358., 1210., 1663.,\n",
              "       1212., 1224., 1238., 1188., 1244., 1264., 1042., 1252., 1155.,\n",
              "       1142., 1223., 1001., 1062., 1858., 1666., 1863., 1275., 1013.,\n",
              "       1468., 1122., 1156., 2290., 1126., 1163., 1268., 1210., 2266.,\n",
              "       2238., 2224., 1192., 1334., 1304.,  955., 1520., 2262., 1663.,\n",
              "       1196., 1243., 1509., 1356., 1214., 1195., 1298., 1180., 2230.,\n",
              "       2220., 1175., 1223., 1148., 1219., 1484., 1030., 2232., 1077.,\n",
              "       1416., 1226., 1223., 1272., 2056., 1181., 1023.])"
            ]
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0KoSCzGX4vL",
        "outputId": "df6b6ad9-083c-4230-f50f-2efe518ae928"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "31     1000\n",
              "246    1210\n",
              "185    1375\n",
              "110    1180\n",
              "90     1150\n",
              "       ... \n",
              "314    1240\n",
              "201    1200\n",
              "421    2050\n",
              "244    1180\n",
              "58     1005\n",
              "Name: x(n + 1), Length: 97, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.score(X_test,Y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cFMeWoLdYUDw",
        "outputId": "5d58bf79-cf78-4835-de7f-49efd81598cf"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9528756634644819"
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rmse=(mean_squared_error(Y_test, Y_pred))**0.5\n",
        "print('RMSE = ', rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fvJysW0YZOcW",
        "outputId": "c56d0718-9270-4b6b-a775-b2af52fbf887"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE =  92.49368883457294\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xa = np.array([[2980,3000,3000, 2710,2820,2740]])\n",
        "xa"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DDZz1zsmZkdh",
        "outputId": "5343cc5e-100c-4d02-d614-2041c62a23b3"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[2980, 3000, 3000, 2710, 2820, 2740]])"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Xa = sc_X.transform(xa)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WuOC1e0oZ15b",
        "outputId": "897a796e-5fca-47b5-d1b4-2175d2c30272"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  \"X does not have valid feature names, but\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ya=model.predict(Xa)\n",
        "ya"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xiv4R62laSO_",
        "outputId": "91c43be9-7e68-4564-d344-6541800eac57"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2254.])"
            ]
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    }
  ]
}